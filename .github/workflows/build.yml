name: Default

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main


jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Build
      run: |
        export VERSION=`cat VERSION`
        export BUILD=$VERSION.$GITHUB_RUN_NUMBER
        echo "VERSION=$VERSION, BUILD=$BUILD"
        ./build.sh
        docker tag clara/dicomadapter:$BUILD clara/dicomadapter:${{ github.sha }}
    - name: Scan image with Azure Container Scan
      uses: Azure/container-scan@v0
      with:
        image-name: clara/dicomadapter:${{ github.sha }}
    - name: Scan image with Anchore
      uses: anchore/scan-action@v2
      with:
        image: clara/dicomadapter:${{ github.sha }}
        fail-build: true
        severity-cutoff: high
    - name: grype scan JSON results
      run: for j in `ls ./anchore-reports/*.json`; do echo "---- ${j} ----"; cat ${j}; echo; done
    - name: Update Docs
      run: |
        export VERSION=`cat VERSION`
        export BUILD=$VERSION.$GITHUB_RUN_NUMBER
        echo "VERSION=$VERSION, BUILD=$BUILD"
        sed -i -e "s,v0.0.0.0,v$BUILD,g" ./docs/docfx.json
        sed -i -e "s,v0.0.0.0,v$BUILD,g" ./docs/index.md
    - uses: nikeee/docfx-action@v1.0.0
      name: Build Docs
      with:
        args: docs/docfx.json


  unit_test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Run Unit Test
      run: ./run-tests-in-docker.sh --unit
      working-directory: ./src
    - name: Upload Test Results
      uses: actions/upload-artifact@v2
      with:
        name: test-results
        path: src/results/*

  integration_test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Install dcmtk
      run: sudo apt-get install dcmtk
    - name: Run Integration Test
      run: ./run-tests-in-docker.sh --integration
      working-directory: ./src
    - name: Upload Test Results
      uses: actions/upload-artifact@v2
      with:
        name: test-results
        path: src/results/*
  

#   integration_test_crd:
#     runs-on: ubuntu-latest
#     steps:
#     - uses: actions/checkout@v2
#     - name: Install dcmtk
#       run: sudo apt-get install dcmtk
#     - name: Run Integration Test w/K8s CRD
#       run: ./run-tests-in-docker.sh --crd
#       working-directory: ./src
#     - name: Upload Test Results
#       uses: actions/upload-artifact@v2
#       with:
#         name: test-results
#         path: src/results/*

      
  publish_test_results:
    runs-on: ubuntu-latest
    if: always()
    needs: [unit_test, integration_test]
    #needs: [unit_test, integration_test, integration_test_crd]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Download Test Results
        uses: actions/download-artifact@v2
      - name: Display structure of downloaded files
        run: ls -R
      - name: Publish Test Reports
        uses: NasAmin/trx-parser@0.0.3
        if: github.event_name == 'push'
        id: trx-parser
        with:
          TRX_PATH: ${{ github.workspace }}/test-results #This should be the path to your TRX files
          REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}      
      - name: Upload CodeCov
        run: |
          bash <(curl -s https://codecov.io/bash) -f "*.codecov.xml" -s ./test-results -Z
